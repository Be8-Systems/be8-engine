const be8=function(){"use strict";function e(){const e=window.crypto.getRandomValues(new Uint8Array(16)).join("");return(new TextEncoder).encode(e)}const t=Object.freeze(["deriveKey","deriveBits"]),r="ECDH",n=Object.freeze({name:r,namedCurve:"P-384"}),i="jwk";return class{#e="";#t=new Map;#r=new Map;#n=new Map;#i=new Map;constructor(e){const t=localStorage.getItem("privateKey"),r=localStorage.getItem("publicKey"),n=localStorage.getItem("accID");if(this.#e=e,!e)throw"no acc id passed to constructor";n!==e?console.log("new acc or first time"):(console.log("old acc"),t&&r?(this.#t.set(e,JSON.parse(r)),this.#r.set(e,JSON.parse(t))):console.log("old acc but no keys"))}hasKeys(){return this.#t.has(this.#e)&&this.#r.has(this.#e)}#o(e){const t=function(e){if(!e)throw"id is required in getTypeOfKey";return"g"===e.charAt(0)?"group":"c"===e.charAt(0)?"channel":"dialog"}(e);return"group"===t?this.#n.get(e):"channel"===t?this.#i.get(e):this.#t.get(e)}addPublicKeys(e=[]){e.forEach((({accID:e,publicKey:t})=>this.#t.set(e,t)))}addPublicKey(e,t){e&&t?this.#t.set(e,t):console.log(`missing accID: "${e}" or key: "${t}" in addPublicKey`)}addGroupKey(e,t){e&&t?this.#n.set(e,t):console.log(`missing accID: "${e}" or key: "${t}" in addGroupKey`)}async generatePrivAndPubKey(){const{privateKey:e,publicKey:r}=await window.crypto.subtle.generateKey(n,!0,t),o=[window.crypto.subtle.exportKey(i,r),window.crypto.subtle.exportKey(i,e)],c=await Promise.all(o);return this.#t.set(this.#e,c[0]),this.#r.set(this.#e,c[1]),c}async encryptTextSimple(e,t,r){const n=this.#o(t),i=this.#r.get(e);if(!n)throw`Missing public key for ${t} at encryptTextSimple`;if(!i)throw`Missing private key for ${e} at encryptTextSimple`;const o=await this.getDerivedKey(n,i);return await this.encryptText(o,r)}async decryptTextSimple(e,t,r,n){const i=this.#o(e),o=this.#r.get(t);if(!i)throw`Missing public key for ${e} at decryptTextSimple`;if(!o)throw`Missing private key for ${t} at decryptTextSimple`;const c=await this.getDerivedKey(i,o);return await this.decryptText(c,r,n)}async getDerivedKey(e,o){if(!e)throw"no public key passed to getDerivedKey";if(!o)throw"no private key passed to getDerivedKey";const c=window.crypto.subtle.importKey(i,e,n,!0,[]),s=window.crypto.subtle.importKey(i,o,n,!0,t);return Promise.all([c,s]).then((function([e,t]){return window.crypto.subtle.deriveKey({name:r,public:e},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}async encryptText(t,r=""){const n=(new TextEncoder).encode(r),i=e(),o={name:"AES-GCM",iv:i};if(!t)throw"no derived key passed to encryptText";return window.crypto.subtle.encrypt(o,t,n).then((function(e){const t=new Uint8Array(e),r=String.fromCharCode.apply(null,t);return{cipherText:window.btoa(r),iv:i}}))}async decryptText(e,t,r){const n=window.atob(t),i=new Uint8Array([...n].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:r};if(!e)throw"no derived key passed to decryptText";if(!r)throw"no iv (Initialization vector) passed to decryptText";return window.crypto.subtle.decrypt(o,e,i).then((function(e){return(new TextDecoder).decode(e)}))}async encryptImage(t,r){const n=(new TextEncoder).encode(r);if(!t)throw"no derived key passed to decryptText";return window.crypto.subtle.encrypt({name:"AES-GCM",iv:e()},t,n).then((function(e){return function(e){const t=new Uint8Array(e);let r="";for(let e=0;e<t.byteLength;e++)r+=String.fromCharCode(t[e]);return window.btoa(r)}(e)}))}async decryptImage(t,r){const n=window.atob(r),i=new Uint8Array([...n].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:e()};if(!t)throw"no derived key passed to decryptText";return window.crypto.subtle.decrypt(o,t,i).then((function(e){return(new TextDecoder).decode(e)}))}}}();
