const be8=function(){"use strict";function e(){const e=self.crypto.randomUUID();return(new TextEncoder).encode(e)}function t(e){const t=new Uint8Array(e);let r="";for(let e=0;e<t.byteLength;e++)r+=String.fromCharCode(t[e]);return window.btoa(r)}const r=Object.freeze(["deriveKey","deriveBits"]),n="ECDH",i=Object.freeze({name:n,namedCurve:"P-384"}),o="jwk";return class{#e="";#t=new Map;#r=new Map;#n=new Map;#i=new Map;constructor(e){const t=localStorage.getItem("privateKey"),r=localStorage.getItem("publicKey"),n=localStorage.getItem("accID");if(this.#e=e,"string"!=typeof e||isNaN(e))throw`no acc id or wrong type passed to the constructor got ${e}`;n!==e?console.log("new acc or first time"):(console.log("old acc"),t&&r?(this.#t.set(e,JSON.parse(r)),this.#r.set(e,JSON.parse(t))):console.log("old acc but no keys"))}getAccID(){return this.#e}hasKeys(){const e=this.#t.has(this.#e),t=this.#r.has(this.#e);return e||console.log(`No public key for ${this.#e} in hasKeys`),t||console.log(`No private key for ${this.#e} in hasKeys`),e&&t}#o(e){const t=function(e){if(!e)throw"id is required in getTypeOfKey";return"g"===e.charAt(0)?"group":"c"===e.charAt(0)?"channel":"dialog"}(e);return"group"===t?this.#n.get(e):"channel"===t?this.#i.get(e):this.#t.get(e)}addPublicKeys(e=[]){e.forEach((({accID:e,publicKey:t})=>this.#t.set(e,t)))}addPublicKey(e,t){return e||console.log(`missing accID: "${e}" at addPublicKey`),t||console.log(`missing key: "${t}" at addPublicKey`),this.#t.set(e,t)}addGroupKey(e,t){e&&t?this.#n.set(e,t):console.log(`missing accID: "${e}" or key: "${t}" in addGroupKey`)}async generateGroupKeys(e){const{privateKey:t,publicKey:n}=await window.crypto.subtle.generateKey(i,!0,r),c=[window.crypto.subtle.exportKey(o,n),window.crypto.subtle.exportKey(o,t)],s=await Promise.all(c),a=this.#n.get(e);return a?(console.log(`Group keys for ${e} already exist`),a):(this.#n.set(e,s[1]),s)}async generatePrivAndPubKey(){const{privateKey:e,publicKey:t}=await window.crypto.subtle.generateKey(i,!0,r),n=[window.crypto.subtle.exportKey(o,t),window.crypto.subtle.exportKey(o,e)],c=await Promise.all(n);return this.#t.set(this.#e,c[0]),this.#r.set(this.#e,c[1]),c}async getDerivedKey(e,t){if(!e)throw"no public key passed to getDerivedKey";if(!t)throw"no private key passed to getDerivedKey";const c=window.crypto.subtle.importKey(o,e,i,!0,[]),s=window.crypto.subtle.importKey(o,t,i,!0,r);return Promise.all([c,s]).then((function([e,t]){return window.crypto.subtle.deriveKey({name:n,public:e},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}async encryptText(t,r=""){const n=(new TextEncoder).encode(r),i=e(),o={name:"AES-GCM",iv:i};if(!t)throw"no derived key passed to encryptText";return window.crypto.subtle.encrypt(o,t,n).then((function(e){const t=new Uint8Array(e),r=String.fromCharCode.apply(null,t);return{cipherText:window.btoa(r),iv:i}}))}async decryptText(e,t="",r){const n=window.atob(t),i=new Uint8Array([...n].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:r};if(!e)throw"no derived key passed to decryptText";if(!r)throw"no iv (Initialization vector) passed to decryptText";return window.crypto.subtle.decrypt(o,e,i).then((function(e){return(new TextDecoder).decode(e)}))}async encryptTextSimple(e,t,r){const n=this.#o(t),i=this.#r.get(e);if(!n)throw`Missing public key for ${t} at encryptTextSimple`;if(!i)throw`Missing private key for ${e} at encryptTextSimple`;const o=await this.getDerivedKey(n,i);return await this.encryptText(o,r)}async decryptTextSimple(e,t,r,n){const i=this.#o(e),o=this.#r.get(t);if(!i)throw`Missing public key for ${e} at decryptTextSimple`;if(!o)throw`Missing private key for ${t} at decryptTextSimple`;const c=await this.getDerivedKey(i,o);return await this.decryptText(c,r,n)}async encryptImage(r,n){const i=(new TextEncoder).encode(n),o=e();if(!r)throw"no derived key passed to decryptText";return window.crypto.subtle.encrypt({name:"AES-GCM",iv:o},r,i).then((function(e){return{cipherImage:t(e),iv:o}}))}async decryptImage(e,t,r){const n=window.atob(t),i=new Uint8Array([...n].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:r};if(!e)throw"no derived key passed to decryptText";return window.crypto.subtle.decrypt(o,e,i).then((function(e){return(new TextDecoder).decode(e)}))}async encryptImageSimple(e,t,r){return{accIDSender:e,accIDReceiver:t,base64Image:r}}async decryptImageSimple(e,t,r,n){return{accIDSender:e,accIDReceiver:t,cipherImage:r,iv:n}}}}();
