const be8=function(){"use strict";function e(){const e=self.crypto.randomUUID();return(new TextEncoder).encode(e)}function t(e){const t=new Uint8Array(e);let n="";for(let e=0;e<t.byteLength;e++)n+=String.fromCharCode(t[e]);return window.btoa(n)}const n=Object.freeze(["deriveKey","deriveBits"]),r="ECDH",i=Object.freeze({name:r,namedCurve:"P-384"}),s="jwk";return class{#e={};#t="";#n=new Map;#r=new Map;#i=new Map;#s=new Map;constructor(e,t){if(this.#t=e,this.#e=t,"string"!=typeof e||isNaN(e))throw`engine: no acc id or wrong type passed to the constructor got ${e}`;if(!t)throw"engine: no indexedDB passed to the constructor"}async setup(){const e=await this.getCachedKeys(),t=await this.getCachedGroupKeys(),n=this.#e.result.transaction("privateKeys","readwrite").objectStore("privateKeys").getAll(),r=this.#t,i=await new Promise((function(e){n.onsuccess=function(t){return e(t.target.result.find((e=>e.accID===r)))}}));return i?(console.log("engine: old acc"),this.#r.set(this.#t,i)):(console.log("engine: brand new acc"),await this.generatePrivAndPubKey()),e.forEach((({accID:e,publicKey:t})=>this.#n.set(e,t))),t.forEach((({groupID:e,version:t,groupKey:n})=>this.#i.set(`${e}:${t}`,n))),e}getAccID(){return this.#t}hasGeneratedKeys(){const e=this.#n.has(this.#t),t=this.#r.has(this.#t);return e||console.log(`engine: No public key for ${this.#t} in hasKeys`),t||console.log(`engine: No private key for ${this.#t} in hasKeys`),e&&t}#o(e){const t=function(e){if(!e)throw"engine: id is required in getTypeOfKey";return"g"===e.charAt(0)?"group":"c"===e.charAt(0)?"channel":"dialog"}(e);return"group"===t?this.#i.get(e):"channel"===t?this.#s.get(e):this.#n.get(e)}async addPublicKeys(e=[]){const t=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys");e.forEach((({accID:e,publicKey:t})=>this.#n.set(e,t)));const n=e.map((function({accID:e,publicKey:n}){t.put({accID:e,...n}),t.onsuccess=()=>console.log(`engine: added public key for ${e}`)}));return await Promise.all(n)}addPublicKey(e,t){const n=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys");return e||console.log(`engine: missing accID: "${e}" at addPublicKey`),t||console.log(`engine: missing key: "${t}" at addPublicKey`),n.put({accID:e,...t}),this.#n.set(e,t)}async addGroupKeys(e,t){if(e&&t?.length>0){const n=this.#e.result.transaction("groupKeys","readwrite").objectStore("groupKeys");t.forEach((({version:t,groupKey:n})=>this.#i.set(`${e}:${t}`,n)));const r=t.map((function({version:t,groupKey:r}){n.put({groupID:e,version:t,...r}),n.onsuccess=()=>console.log(`engine: added group key for ${e}`)}));return await Promise.all(r)}console.log(`engine: missing groupID: "${e}" or keys: "${t}" in addGroupKey`)}async getCachedKeys(){const e=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys").getAll();return await new Promise((function(t){e.onsuccess=function(e){const n=e.target.result.map((e=>({accID:e.accID,publicKey:e})));return t(n)}}))}async getCachedGroupKeys(){const e=this.#e.result.transaction("groupKeys","readwrite").objectStore("groupKeys").getAll();return await new Promise((function(t){e.onsuccess=function(e){const n=e.target.result.map((e=>({groupID:e.groupID,version:e.version,groupKey:e})));return t(n)}}))}async getCachedGroupVersions(e){const t=this.#e.result.transaction("groupKeys","readwrite").objectStore("groupKeys").getAllKeys();return await new Promise((function(n){t.onsuccess=function(t){const r=t.target.result.filter((t=>t[0]===e)).map((e=>e.pop()));return n(r)}}))}async generateGroupKeys(e,t){const{privateKey:r,publicKey:o}=await window.crypto.subtle.generateKey(i,!0,n),c=[window.crypto.subtle.exportKey(s,o),window.crypto.subtle.exportKey(s,r)],a=await Promise.all(c),y=this.#i.get(`${t}:${e}`);return y?(console.log(`engine: Group keys for ${e} already exist`),y):(this.#i.set(`${t}:${e}`,a[1]),a)}async generatePrivAndPubKey(){const{privateKey:e,publicKey:t}=await window.crypto.subtle.generateKey(i,!0,n),r=[window.crypto.subtle.exportKey(s,t),window.crypto.subtle.exportKey(s,e)],o=await Promise.all(r),c=this.#e.result.transaction("privateKeys","readwrite"),a=this.#e.result.transaction("publicKeys","readwrite"),y=a.objectStore("publicKeys"),p=c.objectStore("privateKeys");return y.put({accID:this.#t,...o[0]}),p.put({accID:this.#t,...o[1]}),this.#n.set(this.#t,o[0]),this.#r.set(this.#t,o[1]),await c.complete,await a.complete,o}async getDerivedKey(e,t){if(!e)throw"engine: no public key passed to getDerivedKey";if(!t)throw"engine: no private key passed to getDerivedKey";const o=window.crypto.subtle.importKey(s,e,i,!0,[]),c=window.crypto.subtle.importKey(s,t,i,!0,n);return Promise.all([o,c]).then((function([e,t]){return window.crypto.subtle.deriveKey({name:r,public:e},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}async encryptText(t,n=""){const r=(new TextEncoder).encode(n),i=e(),s=(new TextDecoder).decode(i),o={name:"AES-GCM",iv:i};if(!t)throw"engine: no derived key passed to encryptText";return window.crypto.subtle.encrypt(o,t,r).then((function(e){const t=new Uint8Array(e),n=String.fromCharCode.apply(null,t);return{cipherText:window.btoa(n),iv:s}}))}async decryptText(e,t="",n){const r=window.atob(t),i=new Uint8Array([...r].map((e=>e.charCodeAt(0)))),s={name:"AES-GCM",iv:new TextEncoder("utf-8").encode(n)};if(!e)throw"engine: no derived key passed to decryptText";if(!n)throw"engine: no iv (Initialization vector) passed to decryptText";return window.crypto.subtle.decrypt(s,e,i).then((function(e){return(new TextDecoder).decode(e)}))}async encryptTextSimple(e,t,n){const r=this.#o(t),i=this.#r.get(e);if(!r)throw`engine: Missing public key for ${t} at encryptTextSimple`;if(!i)throw`engine: Missing private key for ${e} at encryptTextSimple`;const s=await this.getDerivedKey(r,i);return await this.encryptText(s,n)}async decryptTextSimple(e,t,n,r){const i=this.#o(e),s=this.#r.get(t);if(!i)throw`engine: Missing public key for ${e} at decryptTextSimple`;if(!s)throw`engine: Missing private key for ${t} at decryptTextSimple`;const o=await this.getDerivedKey(i,s);return await this.decryptText(o,n,r)}async encryptImage(n,r){const i=(new TextEncoder).encode(r),s=e(),o=(new TextDecoder).decode(s);if(!n)throw"engine: no derived key passed to decryptText";return window.crypto.subtle.encrypt({name:"AES-GCM",iv:s},n,i).then((function(e){return{cipherImage:t(e),iv:o}}))}async decryptImage(e,t,n){const r=window.atob(t),i=new Uint8Array([...r].map((e=>e.charCodeAt(0)))),s={name:"AES-GCM",iv:new TextEncoder("utf-8").encode(n)};if(!e)throw"engine: no derived key passed to decryptText";return window.crypto.subtle.decrypt(s,e,i).then((function(e){return(new TextDecoder).decode(e)}))}async encryptImageSimple(e,t,n){const r=this.#o(t),i=this.#r.get(e);if(!r)throw`engine: Missing public key for ${e} at encryptImageSimple`;if(!i)throw`engine: Missing private key for ${t} at encryptImageSimple`;const s=await this.getDerivedKey(r,i);return await this.encryptImage(s,n)}async decryptImageSimple(e,t,n,r){const i=this.#o(e),s=this.#r.get(t);if(!i)throw`engine: Missing public key for ${e} at decryptImageSimple`;if(!s)throw`engine: Missing private key for ${t} at decryptImageSimple`;const o=await this.getDerivedKey(i,s);return await this.decryptImage(o,n,r)}async panic(){const e=[...this.#n.keys()],t=[...this.#r.keys()],n=[...this.#i.keys()],r=this.#e.result.transaction("publicKeys","readwrite"),i=this.#e.result.transaction("privateKeys","readwrite"),s=this.#e.result.transaction("groupKeys","readwrite"),o=r.objectStore("publicKeys"),c=i.objectStore("privateKeys"),a=s.objectStore("groupKeys"),y=e.map((function(e){return new Promise((function(t){return o.delete(e),t()}))})),p=t.map((function(e){return new Promise((function(t){return c.delete(e),t()}))})),u=n.map((function(e){const t=e.split(":");return new Promise((function(e){return a.delete(t),e()}))}));await Promise.all([...y,...p,...u]),this.#n.clear(),this.#r.clear(),this.#i.clear(),this.#s.clear()}}}();
