const be8=function(){"use strict";function e(){const e=self.crypto.randomUUID();return(new TextEncoder).encode(e)}function t(e){const t=new Uint8Array(e);let r="";for(let e=0;e<t.byteLength;e++)r+=String.fromCharCode(t[e]);return window.btoa(r)}const r=Object.freeze(["deriveKey","deriveBits"]),i="ECDH",n=Object.freeze({name:i,namedCurve:"P-384"}),c="jwk";return class{#e={};#t="";#r=new Map;#i=new Map;#n=new Map;#c=new Map;constructor(e,t){if(this.#t=e,this.#e=t,"string"!=typeof e||isNaN(e))throw`no acc id or wrong type passed to the constructor got ${e}`;if(!t)throw"no indexedDB passed to the constructor"}async setup(){const e=await this.getCachedKeys(),t=this.#e.result.transaction("privateKeys","readwrite").objectStore("privateKeys").getAll(),r=this.#t,i=await new Promise((function(e){t.onsuccess=function(t){return e(t.target.result.find((e=>e.accID===r)))}}));return i?(console.log("old acc"),this.#i.set(this.#t,i)):(console.log("brand new acc"),await this.generatePrivAndPubKey()),e.forEach((({accID:e,...t})=>this.#r.set(e,t))),e}getAccID(){return this.#t}hasGeneratedKeys(){const e=this.#r.has(this.#t),t=this.#i.has(this.#t);return e||console.log(`No public key for ${this.#t} in hasKeys`),t||console.log(`No private key for ${this.#t} in hasKeys`),e&&t}#s(e){const t=function(e){if(!e)throw"id is required in getTypeOfKey";return"g"===e.charAt(0)?"group":"c"===e.charAt(0)?"channel":"dialog"}(e);return"group"===t?this.#n.get(e):"channel"===t?this.#c.get(e):this.#r.get(e)}async addPublicKeys(e=[]){const t=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys");e.forEach((({accID:e,publicKey:t})=>this.#r.set(e,t)));const r=e.map((function({accID:e,publicKey:r}){t.put({accID:e,...r}),t.onsuccess=()=>console.log(`added public key for ${e}`)}));return await Promise.all(r)}addPublicKey(e,t){const r=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys");return e||console.log(`missing accID: "${e}" at addPublicKey`),t||console.log(`missing key: "${t}" at addPublicKey`),r.put({accID:e,...t}),this.#r.set(e,t)}addGroupKey(e,t){e&&t?this.#n.set(e,t):console.log(`missing accID: "${e}" or key: "${t}" in addGroupKey`)}async getCachedKeys(){const e=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys").getAll();return await new Promise((function(t){e.onsuccess=function(e){const r=e.target.result.map((e=>({accID:e.accID,publicKey:e})));return t(r)}}))}async generateGroupKeys(e){const{privateKey:t,publicKey:i}=await window.crypto.subtle.generateKey(n,!0,r),s=[window.crypto.subtle.exportKey(c,i),window.crypto.subtle.exportKey(c,t)],o=await Promise.all(s),a=this.#n.get(e);return a?(console.log(`Group keys for ${e} already exist`),a):(this.#n.set(e,o[1]),o)}async generatePrivAndPubKey(){const{privateKey:e,publicKey:t}=await window.crypto.subtle.generateKey(n,!0,r),i=[window.crypto.subtle.exportKey(c,t),window.crypto.subtle.exportKey(c,e)],s=await Promise.all(i),o=this.#e.result.transaction("privateKeys","readwrite"),a=this.#e.result.transaction("publicKeys","readwrite").objectStore("publicKeys"),y=o.objectStore("privateKeys");return a.put({accID:this.#t,...s[0]}),y.put({accID:this.#t,...s[1]}),s}async getDerivedKey(e,t){if(!e)throw"no public key passed to getDerivedKey";if(!t)throw"no private key passed to getDerivedKey";const s=window.crypto.subtle.importKey(c,e,n,!0,[]),o=window.crypto.subtle.importKey(c,t,n,!0,r);return Promise.all([s,o]).then((function([e,t]){return window.crypto.subtle.deriveKey({name:i,public:e},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}async encryptText(t,r=""){const i=(new TextEncoder).encode(r),n=e(),c={name:"AES-GCM",iv:n};if(!t)throw"no derived key passed to encryptText";return window.crypto.subtle.encrypt(c,t,i).then((function(e){const t=new Uint8Array(e),r=String.fromCharCode.apply(null,t);return{cipherText:window.btoa(r),iv:n}}))}async decryptText(e,t="",r){const i=window.atob(t),n=new Uint8Array([...i].map((e=>e.charCodeAt(0)))),c={name:"AES-GCM",iv:r};if(!e)throw"no derived key passed to decryptText";if(!r)throw"no iv (Initialization vector) passed to decryptText";return window.crypto.subtle.decrypt(c,e,n).then((function(e){return(new TextDecoder).decode(e)}))}async encryptTextSimple(e,t,r){const i=this.#s(t),n=this.#i.get(e);if(!i)throw`Missing public key for ${t} at encryptTextSimple`;if(!n)throw`Missing private key for ${e} at encryptTextSimple`;const c=await this.getDerivedKey(i,n);return await this.encryptText(c,r)}async decryptTextSimple(e,t,r,i){const n=this.#s(e),c=this.#i.get(t);if(!n)throw`Missing public key for ${e} at decryptTextSimple`;if(!c)throw`Missing private key for ${t} at decryptTextSimple`;const s=await this.getDerivedKey(n,c);return await this.decryptText(s,r,i)}async encryptImage(r,i){const n=(new TextEncoder).encode(i),c=e();if(!r)throw"no derived key passed to decryptText";return window.crypto.subtle.encrypt({name:"AES-GCM",iv:c},r,n).then((function(e){return{cipherImage:t(e),iv:c}}))}async decryptImage(e,t,r){const i=window.atob(t),n=new Uint8Array([...i].map((e=>e.charCodeAt(0)))),c={name:"AES-GCM",iv:r};if(!e)throw"no derived key passed to decryptText";return window.crypto.subtle.decrypt(c,e,n).then((function(e){return(new TextDecoder).decode(e)}))}async encryptImageSimple(e,t,r){const i=this.#s(t),n=this.#i.get(e);if(!i)throw`Missing public key for ${e} at encryptImageSimple`;if(!n)throw`Missing private key for ${t} at encryptImageSimple`;const c=await this.getDerivedKey(i,n);return await this.encryptImage(c,r)}async decryptImageSimple(e,t,r,i){const n=this.#s(e),c=this.#i.get(t);if(!n)throw`Missing public key for ${e} at decryptImageSimple`;if(!c)throw`Missing private key for ${t} at decryptImageSimple`;const s=await this.getDerivedKey(n,c);return await this.decryptImage(s,r,i)}}}();
