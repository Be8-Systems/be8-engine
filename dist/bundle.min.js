const be8=function(){"use strict";function e(){const e=window.crypto.getRandomValues(new Uint8Array(16)).join("");return(new TextEncoder).encode(e)}const t=Object.freeze(["deriveKey","deriveBits"]),n="ECDH",r=Object.freeze({name:n,namedCurve:"P-384"}),c="jwk";return class{#e="";#t=new Map;#n=new Map;#r=new Map;constructor(e){const t=localStorage.getItem("privateKey"),n=localStorage.getItem("publicKey"),r=localStorage.getItem("accID");this.#e=e,r!==e?console.log("new acc or first time"):(console.log("old acc"),t&&n?(this.#t.set(e,JSON.parse(n)),this.#n.set(e,JSON.parse(t))):console.log("old keys but no keys"))}hasKeys(){return this.#t.has(this.#e)&&this.#n.has(this.#e)}async generatePrivAndPubKey(){const{privateKey:e,publicKey:n}=await window.crypto.subtle.generateKey(r,!0,t),o=[window.crypto.subtle.exportKey(c,n),window.crypto.subtle.exportKey(c,e)],i=await Promise.all(o);return this.#t.set(this.#e,i[0]),this.#n.set(this.#e,i[1]),i}async _encryptText(e,t,n){const r=this.#t.get(t),c=this.#n.get(e),o=await this.getDerivedKey(r,c);return await this.encryptText(o,n)}async getDerivedKey(e,o){const i=window.crypto.subtle.importKey(c,e,r,!0,[]),s=window.crypto.subtle.importKey(c,o,r,!0,t);return Promise.all([i,s]).then((function([e,t]){return window.crypto.subtle.deriveKey({name:n,public:e},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}))}async encryptText(t,n){const r=(new TextEncoder).encode(n),c=e(),o={name:"AES-GCM",iv:c};return window.crypto.subtle.encrypt(o,t,r).then((function(e){const t=new Uint8Array(e),n=String.fromCharCode.apply(null,t);return{cipherText:window.btoa(n),iv:c}}))}async decryptText(e,t,n){const r=window.atob(t),c=new Uint8Array([...r].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:n};return window.crypto.subtle.decrypt(o,e,c).then((function(e){return(new TextDecoder).decode(e)}))}async encryptImage(t,n){const r=(new TextEncoder).encode(n);return window.crypto.subtle.encrypt({name:"AES-GCM",iv:e()},t,r).then((function(e){return function(e){const t=new Uint8Array(e);let n="";for(let e=0;e<t.byteLength;e++)n+=String.fromCharCode(t[e]);return window.btoa(n)}(e)}))}async decryptImage(t,n){const r=window.atob(n),c=new Uint8Array([...r].map((e=>e.charCodeAt(0)))),o={name:"AES-GCM",iv:e()};return window.crypto.subtle.decrypt(o,t,c).then((function(e){return(new TextDecoder).decode(e)}))}}}();
